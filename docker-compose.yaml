# Copyright 2019 Walmart Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: '3.6'

volumes:
  cargo-registry:
  key-registry:

services:
    generate-key-registry:
        image: splintercommunity/splinter-cli:0.3.6
        volumes:
          - key-registry:/key_registry
          - ./key_registry:/input
        command: |
          bash -c "
            if [ ! -f /key_registry/keys.yaml ]
            then
              splinter-cli admin keyregistry \
                -i /input/key_registry_spec.yaml \
                -d /key_registry \
                --force
            fi
          "

    admin-org-a:
      build:
        context: .
      container_name: admin-org-a
      restart: always
      volumes:
        - cargo-registry:/root/.cargo/registry
      expose:
        - 8000
      ports:
        - "8001:8000"
      depends_on:
        - splinterd-node-org-a
      command: |
        bash -c "
          # check if splinterd-node-org-a is available
          while [[ $$(curl --write-out %{http_code} --silent --output /dev/null http://splinterd-node-org-a:8085/status) -ne 200 ]] ; do
             >&2 echo \"SplinterD is unavailable - sleeping\"
             sleep 1
          done

          admin-serviced -vv -b admin-org-a:8000 --splinterd-url http://splinterd-node-org-a:8085
        "

    event-org-a:
      build:
        context: .
      container_name: event-org-a
      restart: always
      volumes:
        - cargo-registry:/root/.cargo/registry
        - ./:/configuration
      expose:
        - 8000
      ports:
        - "8002:8000"
      depends_on:
        - splinterd-node-org-a
      command: |
        bash -c "
          # check if splinterd-node-org-a is available
          while [[ $$(curl --write-out %{http_code} --silent --output /dev/null http://splinterd-node-org-a:8085/status) -ne 200 ]] ; do
             >&2 echo \"SplinterD is unavailable - sleeping\"
             sleep 1
          done;

          sed -i 's|kafka_url: |kafka-org-a:9092|g' /configuration/deployment.yaml \
          && event-listener -vv --splinterd-url http://splinterd-node-org-a:8085 -c /configuration/deployment.yaml
        "

    zookeeper-org-a:
      build:
        context: .
        dockerfile: kafka.dockerfile
      container_name: zookeeper-org-a
      expose:
        - 2181
      working_dir: /kafka
      entrypoint: |
        bash -c "
          bin/zookeeper-server-start.sh config/zookeeper.properties
        "

    kafka-org-a:
      build:
        context: .
        dockerfile: kafka.dockerfile
      container_name: kafka-org-a
      expose:
        - 9092
        - 2181
      depends_on:
        - zookeeper-org-a
      working_dir: /kafka
      entrypoint: |
        bash -c "
          sed -i 's|zookeeper.connect=localhost:2181|zookeeper.connect=zookeeper-org-a:2181|g' config/server.properties \
          && sed -i 's|#listeners=PLAINTEXT://:9092|listeners=PLAINTEXT://:9092|g' config/server.properties \
          && sed -i 's|#advertised.listeners=PLAINTEXT://your.host.name:9092|advertised.listeners=PLAINTEXT://kafka-org-a:9092|g' config/server.properties \
          && bin/kafka-server-start.sh config/server.properties
        "

    kafka-topic-org-a:
      build:
        context: .
        dockerfile: kafka.dockerfile
      container_name: kafka-topic-org-a
      depends_on:
        - kafka-org-b
      working_dir: /kafka
      entrypoint: |
        bash -c "
          bin/kafka-topics.sh --create --bootstrap-server kafka-org-a:9092 --replication-factor 1 --partitions 1 --topic splinter
        "

    splinterd-node-org-a:
      image: splintercommunity/splinterd:0.3.6
      container_name: splinterd-node-org-a
      restart: always
      expose:
        - 8080
        - 8044
        - 8945
        - 8085
      ports:
        - 8089:8085
        - 8045:8044
      volumes:
        - key-registry:/key_registry_shared
        - ./splinterd-config:/configs
        - ./node_registry:/node_registry
      entrypoint: |
        bash -c "
          # We need to wait for the generated key registry to be available
          while [ ! -f /key_registry_shared/keys.yaml ]; do \
            echo 'waiting for key registry'; \
            sleep 1; \
          done && \
          # Copy the generated key registry to its expected location
          cp -a /key_registry_shared/keys.yaml /var/lib/splinter && \
          splinterd --generate-certs -c ./configs/splinterd-node-org-a.toml -vv \
              --service-endpoint 0.0.0.0:8043 \
              --network-endpoint 0.0.0.0:8044 \
              --bind 0.0.0.0:8085
        "

    admin-org-b:
      build:
        context: .
      container_name: admin-org-b
      restart: always
      volumes:
        - cargo-registry:/root/.cargo/registry
      expose:
        - 8000
      ports:
        - "8003:8000"
      depends_on:
        - splinterd-node-org-b
      command: |
        bash -c "
          # check if splinterd-node-org-b is available
          while [[ $$(curl --write-out %{http_code} --silent --output /dev/null http://splinterd-node-org-b:8085/status) -ne 200 ]] ; do
             >&2 echo \"SplinterD is unavailable - sleeping\"
             sleep 1
          done

          admin-serviced -vv -b admin-org-b:8000 --splinterd-url http://splinterd-node-org-b:8085
        "

    event-org-b:
      build:
        context: .
      container_name: event-org-b
      restart: always
      volumes:
         - cargo-registry:/root/.cargo/registry
         - ./:/configuration
      expose:
         - 8000
      ports:
        - "8004:8000"
      depends_on:
        - splinterd-node-org-b
        - kafka-org-b
      command: |
        bash -c "
            # check if splinterd-node-org-b is available
            while [[ $$(curl --write-out %{http_code} --silent --output /dev/null http://splinterd-node-org-b:8085/status) -ne 200 ]] ; do
               >&2 echo \"SplinterD is unavailable - sleeping\"
               sleep 1
            done;

            sed -i 's|kafka_url: |kafka-org-b:9092|g' /configuration/deployment.yaml \
            && event-listener -vv --splinterd-url http://splinterd-node-org-b:8085 -c /configuration/deployment.yaml
          "

    zookeeper-org-b:
      build:
        context: .
        dockerfile: kafka.dockerfile
      container_name: zookeeper-org-b
      expose:
        - 2181
      working_dir: /kafka
      entrypoint: |
        bash -c "
          bin/zookeeper-server-start.sh config/zookeeper.properties
        "

    kafka-org-b:
      build:
        context: .
        dockerfile: kafka.dockerfile
      container_name: kafka-org-b
      expose:
        - 9092
        - 2181
      depends_on:
        - zookeeper-org-b
      working_dir: /kafka
      entrypoint: |
        bash -c "
          sed -i 's|zookeeper.connect=localhost:2181|zookeeper.connect=zookeeper-org-b:2181|g' config/server.properties \
          && sed -i 's|#listeners=PLAINTEXT://:9092|listeners=PLAINTEXT://:9092|g' config/server.properties \
          && sed -i 's|#advertised.listeners=PLAINTEXT://your.host.name:9092|advertised.listeners=PLAINTEXT://kafka-org-b:9092|g' config/server.properties \
          && bin/kafka-server-start.sh config/server.properties
        "

    kafka-topic-org-b:
      build:
        context: .
        dockerfile: kafka.dockerfile
      container_name: kafka-topic-org-b
      depends_on:
        - kafka-org-b
      working_dir: /kafka
      entrypoint: |
        bash -c "
          bin/kafka-topics.sh --create --bootstrap-server kafka-org-b:9092 --replication-factor 1 --partitions 1 --topic splinter
        "

    splinterd-node-org-b:
      image: splintercommunity/splinterd:0.3.6
      container_name: splinterd-node-org-b
      restart: always
      expose:
        - 8080
        - 8044
        - 8945
        - 8085
      ports:
        - 8090:8085
        - 8046:8044
      volumes:
        - key-registry:/key_registry_shared
        - ./splinterd-config:/configs
        - ./node_registry:/node_registry
      entrypoint: |
        bash -c "
          # We need to wait for the generated key registry to be available
          while [ ! -f /key_registry_shared/keys.yaml ]; do \
            echo 'waiting for key registry'; \
            sleep 1; \
          done && \
          # Copy the generated key registry to its expected location
          cp -a /key_registry_shared/keys.yaml /var/lib/splinter && \
          splinterd --generate-certs -c ./configs/splinterd-node-org-b.toml -vv \
              --service-endpoint 0.0.0.0:8043 \
              --network-endpoint 0.0.0.0:8044 \
              --bind 0.0.0.0:8085
        "
